# Demo Final - Azure Monitor & Application Insights
# Script para demostrar todas las capacidades del entorno de monitoreo

Write-Host "üöÄ DEMO: Azure Monitor & Application Insights" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""

$baseUrl = "https://app-bwkinh757hlog.azurewebsites.net"
$resourceGroup = "demo-monitor-rg"

# 1. Verificar estado de la aplicaci√≥n
Write-Host "1. üìä Verificando estado de la aplicaci√≥n..." -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "$baseUrl/health" -Method Get -TimeoutSec 10
    Write-Host "   ‚úÖ Aplicaci√≥n: SALUDABLE" -ForegroundColor Green
    Write-Host "   ‚è±Ô∏è  Uptime: $([math]::Round($health.uptime, 2)) segundos" -ForegroundColor Green
    Write-Host "   üíæ Memoria: $([math]::Round($health.memory.heapUsed / 1MB, 2)) MB" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error verificando salud: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host ""

# 2. Probar API de productos
Write-Host "2. üõçÔ∏è  Probando API de productos..." -ForegroundColor Yellow
try {
    $products = Invoke-RestMethod -Uri "$baseUrl/api/products" -Method Get -TimeoutSec 10
    Write-Host "   ‚úÖ API funcionando: $($products.count) productos disponibles" -ForegroundColor Green
    Write-Host "   üì¶ Productos: $($products.data | ForEach-Object { $_.name } | Join-String -Separator ', ')" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error en API: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 3. Generar telemetr√≠a de errores
Write-Host "3. üî• Generando errores para telemetr√≠a..." -ForegroundColor Yellow
$errorCount = 0
for ($i = 1; $i -le 3; $i++) {
    try {
        Invoke-RestMethod -Uri "$baseUrl/error" -Method Get -TimeoutSec 5 | Out-Null
    } catch {
        $errorCount++
        Write-Host "   ‚úÖ Error $i generado correctamente (HTTP 500)" -ForegroundColor Green
    }
}
Write-Host "   üìä Total errores generados: $errorCount" -ForegroundColor Green

Write-Host ""

# 4. Prueba de carga
Write-Host "4. ‚ö° Ejecutando prueba de carga..." -ForegroundColor Yellow
try {
    $loadResult = Invoke-RestMethod -Uri "$baseUrl/load?iterations=10000" -Method Get -TimeoutSec 20
    Write-Host "   ‚úÖ Prueba de carga completada" -ForegroundColor Green
    Write-Host "   ‚è±Ô∏è  Duraci√≥n: $($loadResult.duration) ms" -ForegroundColor Green
    Write-Host "   üî¢ Iteraciones: $($loadResult.iterations)" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error en prueba de carga: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 5. Prueba de memoria
Write-Host "5. üíæ Ejecutando prueba de memoria..." -ForegroundColor Yellow
try {
    $memResult = Invoke-RestMethod -Uri "$baseUrl/memory?size=2000000" -Method Get -TimeoutSec 15
    Write-Host "   ‚úÖ Prueba de memoria completada" -ForegroundColor Green
    Write-Host "   üìà Memoria allocada: $([math]::Round($memResult.allocatedSize / 1MB, 2)) MB" -ForegroundColor Green
    Write-Host "   üìä Diferencia heap: $([math]::Round($memResult.memoryDifference.heapUsed / 1MB, 2)) MB" -ForegroundColor Green
} catch {
    Write-Host "   ‚ùå Error en prueba de memoria: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 6. Prueba de dependencias
Write-Host "6. üîó Ejecutando prueba de dependencias..." -ForegroundColor Yellow
try {
    $depResult = Invoke-RestMethod -Uri "$baseUrl/dependencies" -Method Get -TimeoutSec 15
    Write-Host "   ‚úÖ Prueba de dependencias completada" -ForegroundColor Green
    Write-Host "   üéØ Dependencias simuladas:" -ForegroundColor Green
    foreach ($dep in $depResult.dependencies) {
        Write-Host "      - $($dep.name): $([math]::Round($dep.duration, 2)) ms" -ForegroundColor Cyan
    }
} catch {
    Write-Host "   ‚ùå Error en prueba de dependencias: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 7. Generar tr√°fico sostenido
Write-Host "7. üåä Generando tr√°fico sostenido..." -ForegroundColor Yellow
$successCount = 0
$totalRequests = 10
for ($i = 1; $i -le $totalRequests; $i++) {
    try {
        Invoke-RestMethod -Uri "$baseUrl/health" -Method Get -TimeoutSec 5 | Out-Null
        $successCount++
        if ($i % 3 -eq 0) {
            Write-Host "   üìä $i/$totalRequests requests completados..." -ForegroundColor Cyan
        }
    } catch {
        Write-Host "   ‚ö†Ô∏è  Request $i fall√≥" -ForegroundColor Yellow
    }
    Start-Sleep -Milliseconds 500
}
Write-Host "   ‚úÖ Tr√°fico completado: $successCount/$totalRequests requests exitosos" -ForegroundColor Green

Write-Host ""

# 8. Informaci√≥n del entorno
Write-Host "8. üìã Informaci√≥n del entorno de monitoreo:" -ForegroundColor Yellow
Write-Host "   üåê URL de la aplicaci√≥n: $baseUrl" -ForegroundColor Cyan
Write-Host "   üìä Application Insights: insights-bwkinh757hlog" -ForegroundColor Cyan
Write-Host "   üìÅ Resource Group: $resourceGroup" -ForegroundColor Cyan
Write-Host "   üìç Regi√≥n: North Europe" -ForegroundColor Cyan

Write-Host ""

# 9. Enlaces √∫tiles
Write-Host "9. üîó Enlaces √∫tiles para la demo:" -ForegroundColor Yellow
Write-Host "   üåê Aplicaci√≥n Web: $baseUrl" -ForegroundColor Cyan
Write-Host "   üìä Health Check: $baseUrl/health" -ForegroundColor Cyan
Write-Host "   üõçÔ∏è  API Productos: $baseUrl/api/products" -ForegroundColor Cyan
Write-Host "   üî• Generar Error: $baseUrl/error" -ForegroundColor Cyan
Write-Host "   ‚ö° Prueba de Carga: $baseUrl/load?iterations=5000" -ForegroundColor Cyan
Write-Host "   üíæ Prueba de Memoria: $baseUrl/memory?size=1000000" -ForegroundColor Cyan
Write-Host "   üîó Prueba de Dependencias: $baseUrl/dependencies" -ForegroundColor Cyan

Write-Host ""
Write-Host "‚úÖ DEMO COMPLETADO EXITOSAMENTE" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìå Pr√≥ximos pasos para la presentaci√≥n:" -ForegroundColor White
Write-Host "   1. Abrir Azure Portal -> Application Insights 'insights-bwkinh757hlog'" -ForegroundColor White
Write-Host "   2. Revisar m√©tricas en tiempo real (Live Metrics)" -ForegroundColor White
Write-Host "   3. Verificar errores capturados (Failures)" -ForegroundColor White
Write-Host "   4. Revisar performance (Performance)" -ForegroundColor White
Write-Host "   5. Verificar alertas configuradas (Alerts)" -ForegroundColor White
Write-Host "   6. Mostrar logs y queries en Log Analytics" -ForegroundColor White

Write-Host ""
Write-Host "üéØ La aplicaci√≥n est√° generando telemetr√≠a completa para la demo!" -ForegroundColor Green
